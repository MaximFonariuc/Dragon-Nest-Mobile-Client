require "LuaTimedActivitiesDoc.lua"


LuaRechargeActivityHandler = {}
local this = LuaRechargeActivityHandler

local m_bIsVisible = false

local m_progress
local m_rewardTpl
local m_itemTpl
local m_timeLab
local m_curLab
local m_nextLab
local m_gotGo
local m_getBtn
local m_helpBtn

local m_rewardPool
local m_itemPool

--called by MonoBehaviour.Awake
function LuaRechargeActivityHandler.Awake(go)
	--print("Awake")
	m_getBtn = go.transform:Find("GetBtn").gameObject
	m_helpBtn = go.transform:Find("HelpBtn").gameObject
	m_gotGo = go.transform:Find("GotLab").gameObject
	m_timeLab = go.transform:Find("TimeLab"):GetComponent("UILabel")
	m_nextLab = go.transform:Find("NextGoal"):GetComponent("UILabel")
	m_curLab = go.transform:Find("CurGoal"):GetComponent("UILabel")
	m_progress = go.transform:Find("Process"):GetComponent("UISlider")

	m_rewardTpl = go.transform:Find("Rewards/RewardTpl")
	m_rewardPool = Hotfix.SetupPool(m_rewardTpl.parent.gameObject, m_rewardTpl.gameObject, 2)

	m_itemTpl = go.transform:Find("Items/ItemTpl")
	m_itemPool = Hotfix.SetupPool(m_itemTpl.parent.gameObject, m_itemTpl.gameObject, 2)

	--m_colorLab = tra:Find("num"):GetComponent("UILabel")
	LuaTimedActivitiesDoc.SetRechargedActivityDlg(this)

	Hotfix.SetClickCallback(m_helpBtn, this.OnClickHelp)
end


function LuaRechargeActivityHandler.Start()
	--print("Start")
end


function LuaRechargeActivityHandler.OnEnable()
	--print("LuaRechargeActivityHandler.OnEnable")
	m_bIsVisible = true
	this.FillContent()
end


function LuaRechargeActivityHandler.OnDisable()
	--print("LuaRechargeActivityHandler.OnDisable")
	m_bIsVisible = false
	if not IsNil(m_rewardPool) then
		m_rewardPool:FakeReturnAll()
	end

	if not IsNil(m_itemPool) then
		m_itemPool:FakeReturnAll()
	end
end


function LuaRechargeActivityHandler.OnDestroy()
	--print("LuaRechargeActivityHandler.OnDestroy")
	m_bIsVisible = false
	if not IsNil(m_rewardPool) then
		m_rewardPool:FakeReturnAll()
	end

	if not IsNil(m_itemPool) then
		m_itemPool:FakeReturnAll()
	end
end


function LuaRechargeActivityHandler.OnShow()
	--print("LuaRechargeActivityHandler.OnShow")
end

function LuaRechargeActivityHandler.OnHide()
	--print("LuaRechargeActivityHandler.OnHide")
end

function LuaRechargeActivityHandler.IsVisible()
	return m_bIsVisible
end

function LuaRechargeActivityHandler.RefreshUi( ... )
	print("LuaRechargeActivityHandler.RefreshUi m_bIsVisible = "..tostring(m_bIsVisible))
	if m_bIsVisible == false then return end

	this.FillContent()
end

function LuaRechargeActivityHandler.FillContent( ... )
	--print("LuaRechargeActivityHandler.FillContent")
	m_timeLab.text = LuaTimedActivitiesDoc:GetTimeTips(481)
	local num,num1 =  LuaTimedActivitiesDoc:GetNextNeedNum(481)
	if num == 0 then
		m_curLab.text = Hotfix.GetStringTable("TimedLimitTotalTips")
		m_nextLab.gameObject:SetActive(false)
	else
		m_nextLab.gameObject:SetActive(true)
		m_curLab.text = Hotfix.GetStringTable("TimedRechargeTips1")..tostring(num1)
		m_nextLab.text = Hotfix.GetStringTable("TimedLimitTips")..tostring(num)
	end

	this.FillRewards()
	this.FillProcess()
end

local m_selectIndex = 1
local m_selectGo = nil
function LuaRechargeActivityHandler.FillRewards( ... )
	--print("LuaRechargeActivityHandler.FillRewards")
	m_rewardPool:ReturnAll()

	local datas = LuaTimedActivitiesDoc:GetRechargedData()
	if datas == nil then return end

	local go
	local child
	local data
	for i=1,#datas do

		data = datas[i]
		go = m_rewardPool:FetchGameObject()
		go:SetActive(true)
		go.name = tostring(i)

		local icon = go.transform:GetComponent("UISprite")
		icon.uid = i
		Hotfix.SetClickCallback(go, this.OnClickReward)

		go.transform.localScale = Vector3.one
		go.transform.localPosition = Vector3(m_rewardPool.TplPos.x + m_rewardPool.TplWidth * (i - 1),m_rewardPool.TplPos.y-m_rewardPool.TplHeight * ((i-1) % 2),0)
		
		go.transform:Find("Get").gameObject:SetActive(data.state == 0 or data.state == 1)
		go.transform:Find("Got").gameObject:SetActive(data.state == 2)

		icon = go.transform:Find("Box"):GetComponent("UISprite")
		if data.state == 0 or data.state == 1 then
			icon.spriteName = data.icon
		elseif data.state == 2 then
			icon.spriteName = data.icon.."_1"
		end

		go.transform:Find("RedPoint").gameObject:SetActive(data.hadRedDot)

		local num = go.transform:Find("Num/Txt"):GetComponent("UILabel")
		num.text = tostring(data.targetNum)

		go.transform:Find("Selected").gameObject:SetActive(i==m_selectIndex)
		if(i==m_selectIndex) then
			this.OnClickReward(go)
		end
	end
end

function LuaRechargeActivityHandler.FillProcess( ... )
	--print("LuaRechargeActivityHandler.FillProcess")
	local datas = LuaTimedActivitiesDoc:GetRechargedData()
	if datas == nil then return end
	--print("datas.count = "..tostring(#datas))
	local total = datas[#datas].targetNum
	local cur = datas[#datas].progress

	m_progress.value = cur / total 
	if m_progress.value > 1 then 
		m_progress.value = 1
	end

	local num = m_progress.transform:Find("Current"):GetComponent("UILabel")
	num.text = tostring(cur).."/"..tostring(total)
end

--点击物品的时候调用
function LuaRechargeActivityHandler.FillItems(data)

	if data == nil then return end

	print("data.state = "..tostring(data.state))
	--处理领取按钮
	m_gotGo:SetActive(data.state == 2)
	m_getBtn:SetActive(true)
	local spr = m_getBtn.transform:GetComponent("UISprite")
	if data.state == 0 then
		spr.color = Color.black
	elseif data.state == 1 then
		spr.color = Color.white
	elseif data.state == 2 then
		m_getBtn:SetActive(false)
	end

	Hotfix.SetClickCallback(m_getBtn, this.ReqReward)

	--填充奖励物品
	if data.items == nil then return end

	m_itemPool:ReturnAll()

	local rewards = data.items
	local go

	for i=0,rewards.count-1 do
		go = m_itemPool:FetchGameObject()
		go:SetActive(true)
		go.name = tostring(i)

		go.transform.localScale = Vector3.one
		go.transform.localPosition = Vector3(-m_itemPool.TplWidth * i, 0, 0)

		local id = Hotfix.ParseUIntSeqList(rewards,i,0) 
		local num = Hotfix.ParseUIntSeqList(rewards,i,1)


		Hotfix.DrawItemView(go, id, num, true)

		local icon = go.transform:Find("Icon"):GetComponent("UISprite")
		icon.uid = id
		Hotfix.SetClickCallback(icon.gameObject, this.ShowIconTip)
	end
end

--点击奖励
function LuaRechargeActivityHandler.OnClickReward(go)
	--print("LuaRechargeActivityHandler.OnClickReward")

	local datas = LuaTimedActivitiesDoc:GetRechargedData()
	if datas == nil then return end

	local spr = go.transform:GetComponent("UISprite")
	local index = spr.uid
	if index > #datas or index <= 0 then
		print("Index "..index.."out of range: "..#datas)
		return
	end

	if not IsNil(m_selectGo) then
		m_selectGo.transform:Find("Selected").gameObject:SetActive(false)
	end
	go.transform:Find("Selected").gameObject:SetActive(true)

	m_selectGo = go
	m_selectIndex = index

	this.FillItems(datas[index])
end

--点击物品tips
function LuaRechargeActivityHandler.ShowIconTip(go)
	--print("LuaRechargeActivityHandler.ShowIconTip")
	Hotfix.LuaShowItemTooltipDialog(go:GetComponent("UISprite").uid, go)
end

--领取奖励
function LuaRechargeActivityHandler.ReqReward(go)
	--print("<color=green>LuaRechargeActivityHandler.GetReward</color>")
	local datas = LuaTimedActivitiesDoc:GetRechargedData()
	if datas == nil then return end

	local data = datas[m_selectIndex]
	--print("<color=green>data.state = </color>"..tostring(data.state))
	if data.state ~= 1 then return end --未达到领取条件不能领取

	LuaTimedActivitiesDoc:ReqGetActivityReward(data.actid,data.taskid)
end

function LuaRechargeActivityHandler.OnClickHelp( ... )
	--print("<color=green>LuaRechargeActivityHandler.OnClickHelp</color>")

	Hotfix.CallSingleMethod("UI.XCommonHelpTipView", true, false, "ShowHelp", 481)
end